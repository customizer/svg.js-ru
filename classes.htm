<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>svg.js Справочное руководство</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>

<body>
<h3>Классы</h3>
SVG.js добавляет множество функций, не связанных со спецификацией SVG.
Большинство дополнений являются частью <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" target="_blank">объектно-ориентированного программирования</a>, но есть и другие полезные утилиты.<br><br>

<h4 id="1">SVG.Array</h4>
Предназначен для простых строк значений, разделенных пробелами:
<pre>// javascript
'0.343 0.669 0.119 0 0 0.249 -0.626 0.13 0 0 0.172 0.334 0.111 0 0 0 0 0 1 0'</pre>
Также может передаваться и в более приемлемом формате:
<pre>// javascript
new SVG.Array([ .343,  .669, .119, 0,   0
              , .249, -.626, .130, 0,   0
              , .172,  .334, .111, 0,   0
              , .000,  .000, .000, 1,  -0 ])</pre>
<div class=blockindent><br>
<pre id="1at"><span class="lnk" onmouseover="show('at - предлог в')" onmouseout="hide()">at()</span></pre>
<div class=list>возвращает - новый экземпляр</div>
Данный метод превратит массив в заданную позицию между&nbsp;<tt>0</tt> и&nbsp;<tt>1</tt>:
<pre>// javascript
array.at(0.27).toString() // -> returns (возвращает) '27,0 73,100 127,127'</pre><br>

<pre id="1bbox"><span class="lnk" onmouseover="show('bbox - сокращ. англ. слов bounding box - ограничительный<br>прямоугольник, ограничительная рамка')" onmouseout="hide()">bbox()</span></pre>
<div class=list>возвращает - объект</div>
Метод получает ограничительную рамку геометрического объекта, представленного массивом:
<pre>// javascript
array.bbox()</pre>
<div class=note><b>Примечание:</b> Этот метод доступен только для <tt><a href="#2" onmouseover="show('SVG.PointArray')" onmouseout="hide()">SVG.PointArray</a></tt> и <tt><a href="#3" onmouseover="show('SVG.PathArray')" onmouseout="hide()">SVG.PathArray</a></tt>.</div><br>

<pre id="1clone"><span class="lnk" onmouseover="show('clone - клон, клонировать')" onmouseout="hide()">clone()</span></pre>
<div class=list>возвращает - новый экземпляр</div>
Делает клон массива и возвращает его:
<pre>// javascript
var array = new SVG.Array()
var clone = array.clone()</pre>
<div class=note><b>Примечание:</b> Данный метод выполняет глубокое клонирование многомерных массивов, таких как <tt><a href="#2" onmouseover="show('SVG.PointArray')" onmouseout="hide()">SVG.PointArray</a></tt>
и <tt><a href="#3" onmouseover="show('SVG.PathArray')" onmouseout="hide()">SVG.PathArray</a></tt>.</div>
<div class=note><b>Примечание 2:</b> Очевидно, что возвращаемый массив имеет тот же класс, что и клонируемый массив (например, <tt>SVG.Array</tt>, <tt>SVG.PointArray</tt> или <tt>SVG.PathArray</tt>).</div><br>

<pre id="1morph"><span class="lnk" onmouseover="show('morph - морф, оборотень, превращаться')" onmouseout="hide()">morph()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Для анимации значений массива метод <tt>morph()</tt> позволяет передать конечное значение. Это может быть либо строковое значение, либо простой массив, либо экземпляр массива SVG.js того же типа:
<pre>// javascript
var array = new SVG.PointArray([[0, 0], [100, 100]])
array.morph('100,0 0,100 200,200')</pre>
Этот метод подготовит массив, обеспечивая одинаковую длину как исходного, так и конечного массивов.
<div class=note><b>Примечание:</b> Для преобразования путей различной длины нужно подключить плагин <a href="https://github.com/svgdotjs/svg.pathmorphing.js" target="_blank">svg.pathmorphing.js</a>.</div><br>

<pre id="1move"><span class="lnk" onmouseover="show('move - двигать, перемещать')" onmouseout="hide()">move()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Перемещает геометрический элемент, представленный массивом, с заданными значениями координат&nbsp;<tt>x</tt> и&nbsp;<tt>y</tt>.
<pre>// javascript
var array = new SVG.PointArray([[0, 0], [100, 100]])
array.move(33,75)
array.toString() // -> returns (возвращает) '33,75 133,175'</pre>
<div class=note><b>Примечание:</b> Этот метод доступен только для <tt><a href="#2" onmouseover="show('SVG.PointArray')" onmouseout="hide()">SVG.PointArray</a></tt> и <tt><a href="#3" onmouseover="show('SVG.PathArray')" onmouseout="hide()">SVG.PathArray</a></tt>.</div><br>

<pre id="1reverse"><span class="lnk" onmouseover="show('reverse - задний ход, реверс')" onmouseout="hide()">reverse()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Изменяет порядок массива на обратный:
<pre>// javascript
var array = new SVG.PointArray([[0, 0], [100, 100]])
array.reverse()
array.toString() // -> returns (возвращает) '100,100 0,0'</pre><br>

<pre id="1settle"><span class="lnk" onmouseover="show('settle - урегулирование, заселение, улаживание')" onmouseout="hide()">settle()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
По завершении трансформации (морфинга), метод <tt>settle()</tt> удалит все переходные точки, типа дубликатов.
<pre>// javascript
array.settle()</pre><br>

<pre id="1size"><span class="lnk" onmouseover="show('size - размер')" onmouseout="hide()">size()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Изменяет массив геометрического элемента по заданным значениям ширины (<tt>width</tt>) и высоты (<tt>height</tt>):
<pre>// javascript
var array = new SVG.PointArray([[0, 0], [100, 100]])
array.move(100,100).size(222,333)
array.toString() // -> returns (возвращает) '100,100 322,433'</pre>
<div class=note><b>Примечание:</b> Этот метод доступен только для <tt><a href="#2" onmouseover="show('SVG.PointArray')" onmouseout="hide()">SVG.PointArray</a></tt> и <tt><a href="#3" onmouseover="show('SVG.PathArray')" onmouseout="hide()">SVG.PathArray</a></tt>.</div><br>

<pre id="1transform"><span class="lnk" onmouseover="show('transform - преобразование, превращение')" onmouseout="hide()">transform()</span></pre>
<div class=list>возвращает - <tt>SVG.PointArray</tt></div>
Преобразует точки массива с помощью матрицы, без изменения исходного массива:
<pre>// javascript
var array = new SVG.PointArray([[0, 0], [100, 100]])
array.transform(new SVG.Matrix().translate(1, 2)).toString()
//-> returns (возвращает) '1,2 101,102'</pre>

<div class=note><b>Примечание:</b> Этот метод доступен только для <tt><a href="#2" onmouseover="show('SVG.PointArray')" onmouseout="hide()">SVG.PointArray</a></tt>.</div></div><br><br>

<h4 id="2">SVG.PointArray</h4>
<div class=list>наследует от <tt>SVG.Array</tt>.</div>
SVG.PointArray чуть сложнее SVG.Array и используется для элементов ломаная линия (polyline) и многоугольник (polygon). Это многоместная строка:
<pre>// javascript
'0,0 100,100'
// or (или)
'0 0 100 100'
// or (или)
'0, 0, 100, 100'</pre>
Представление в виде "плоского" массива:
<pre>// javascript
[0, 0, 100, 100]</pre>
Представление в виде многомерного массива:
<pre>// javascript
[
  [0, 0]
, [100, 100]
]</pre>
Предварительная компиляция в виде <tt>SVG.PointArray</tt>:
<pre>// javascript
new SVG.PointArray([
  [0, 0]
, [100, 100]
])</pre>
Обратите внимание, что каждый экземпляр <tt>SVG.Polyline</tt> и <tt>SVG.Polygon</tt> содержит ссылку на экземпляр <tt>SVG.PointArray</tt>:
<pre>// javascript
polygon.array() // -> returns the SVG.PointArray instance
                // -> возвращает экземпляр SVG.PointArray</pre><br><br>


<h4 id="3">SVG.PathArray</h4>
<div class=list>наследует от <tt>SVG.Array</tt>.</div>
Массивы путей (PathArray) содержат массивы, представляющие каждый сегмент строки пути:
<pre>// javascript
'M0 0L100 100z'</pre>
Представление в виде "плоского" массива:
<pre>// javascript
[ 'M', 0, 0, 'L', 100, 100, 'z' ]</pre>
Представление в виде многомерного массива:
<pre>// javascript
[
  ['M', 0, 0]
, ['L', 100, 100]
, ['z']
]</pre>
Предварительная компиляция в виде <tt>SVG.PathArray</tt>:
<pre>// javascript
new SVG.PathArray([
  ['M', 0, 0]
, ['L', 100, 100]
, ['z']
])</pre>
Обратите внимание, что каждый экземпляр <tt>SVG.Path</tt> содержит ссылку на экземпляр <tt>SVG.PathArray</tt>:
<pre>// javascript
path.array() // -> returns the SVG.PathArray instance
             // -> возвращает экземпляр SVG.PathArray</pre>

<h5>Синтаксис</h5>
Синтаксис массивов путей (PathArray) довольно предсказуем. В основном это <a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D0%BB_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" target="_blank">литеральные</a> представления в виде двумерных массивов.
<div class=blockindent>
&nbsp; &nbsp; &nbsp; &nbsp; <b>Move To</b> (переместить в)<br>
Исходный синтаксис <tt>M0 0</tt> или <tt>m0 0</tt>. Синтаксис SVG.js <tt>['M',0,0]</tt> или <tt>['m',0,0]</tt>.<br>

&nbsp; &nbsp; &nbsp; &nbsp; <b>Line To</b> (линия к)<br>
Исходный синтаксис <tt>L100 100</tt> или <tt>l100 100</tt>. Синтаксис SVG.js <tt>['L',100,100]</tt> или <tt>['l',100,100]</tt>.<br>

&nbsp; &nbsp; &nbsp; &nbsp; <b>Horizontal line</b> (горизонтальная линия)<br>
Исходный синтаксис <tt>H200</tt> или <tt>h200</tt>. Синтаксис SVG.js <tt>['H',200]</tt> или <tt>['h',200]</tt>.<br>

&nbsp; &nbsp; &nbsp; &nbsp; <b>Vertical line</b> (вертикальная линия)<br>
Исходный синтаксис <tt>V300</tt> или <tt>v300</tt>. Синтаксис SVG.js <tt>['V',300]</tt> или <tt>['v',300]</tt>.<br>

&nbsp; &nbsp; &nbsp; &nbsp; <b>Bezier curve</b> (кривая Безье)<br>
Исходный синтаксис <tt>C20 20 40 20 50 10</tt> или <tt>c20 20 40 20 50 10</tt>. Синтаксис SVG.js <tt>['C',20,20,40,20,50,10]</tt> или <tt>['c',20,20,40,20,50,10]</tt>.<br>

&nbsp; &nbsp; Или зеркальное отражение с <tt>S</tt> (от smooth - гладкое (соединение)):<br>

Исходный синтаксис <tt>S40 20 50 10</tt> или <tt>s40 20 50 10</tt>. Синтаксис SVG.js <tt>['S',40,20,50,10]</tt> или <tt>['s',40,20,50,10]</tt>.<br>

&nbsp; &nbsp; Или квадратичная кривая с <tt>Q</tt> (от quadratic - квадратичная):<br>

Исходный синтаксис <tt>Q20 20 50 10</tt> или <tt>q20 20 50 10</tt>. Синтаксис SVG.js <tt>['Q',20,20,50,10]</tt> или <tt>['q',20,20,50,10]</tt>.<br>

&nbsp; &nbsp; Или полное сокращение с <tt>T</tt> (для соединения нескольких квадратичных кривых Безье):<br>

Исходный синтаксис <tt>T50 10</tt> или <tt>t50 10</tt>. Синтаксис SVG.js <tt>['T',50,10]</tt> или <tt>['t',50,10]</tt>.<br>

&nbsp; &nbsp; &nbsp; &nbsp; <b>Arc</b> (дуга)<br>
Исходный синтаксис <tt>A 30 50 0 0 1 162 163</tt> или <tt>a 30 50 0 0 1 162 163</tt>. Синтаксис SVG.js <tt>['A',30,50,0,0,1,162,163]</tt> или <tt>['a',30,50,0,0,1,162,163]</tt>.<br>

&nbsp; &nbsp; &nbsp; &nbsp; <b>Close</b> (закрыть)<br>
Исходный синтаксис <tt>Z</tt> или <tt>z</tt>. Синтаксис SVG.js <tt>['Z']</tt> или <tt>['z']</tt>.</div>
Наилучшую документацию по путям можно найти на <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths" target="_blank">MDN</a>. <a href="https://developer.mozilla.org/ru/docs/Web/SVG/Tutorial/Paths" target="_blank">Вот эта же страница</a> на русском языке.<br><br>


<h4 id="4">SVG.Color</h4>
В SVG.js имеется специальный класс цвета, обрабатывающий различные типы значений цвета. Допустимые значения:
<div class=blockindent>
&nbsp; &#9679; &nbsp; <b>шестнадцатиричная строка</b>; на основе трех цифр (например,&nbsp;<tt>#f06</tt>) или на основе шести цифр (например,&nbsp;<tt>#ff0066</tt>) &nbsp;<tt>-&#62;</tt>&nbsp; <tt>new SVG.Color('#f06')</tt><br>
&nbsp; &#9679; &nbsp; <b>строка RGB</b>; например, <tt>rgb(255, 0, 102)</tt> &nbsp;<tt>-&#62;</tt>&nbsp; <tt>new SVG.Color('rgb(255, 0, 102)')</tt><br>
&nbsp; &#9679; &nbsp; <b>объект RGB</b>; например, <tt>{ r: 255, g: 0, b: 102 }</tt> &nbsp;<tt>-&#62;</tt>&nbsp; <tt>new SVG.Color({ r: 255, g: 0, b: 102 })</tt></div>
Обратите внимание, что при работе с объектами важно каждый раз указывать все три значения.<br><br>
Экземпляр <tt>SVG.Color</tt> имеет несколько собственных методов.
<div class=blockindent><br>
<pre id="4at"><span class="lnk" onmouseover="show('at - предлог в')" onmouseout="hide()">at()</span></pre>
<div class=list>возвращает - <tt>SVG.Color</tt></div>
Получает изменяемый цвет в заданной позиции:
<pre>// javascript
var color = new SVG.Color('#ff0066').morph('#000')
color.at(0.5).toHex() // -> '#7f0033'</pre><br>

<pre id="4brightness"><span class="lnk" onmouseover="show('brightness - яркость')" onmouseout="hide()">brightness()</span></pre>
<div class=list>возвращает - число (<tt>number</tt>)</div>
Метод получает значение яркости цвета:
<pre>// javascript
color.brightness() // -> returns (возвращает) 0.344</pre>
Это предполагаемая яркость, где значение&nbsp;<tt>0</tt> это чёрный, а&nbsp;<tt>1</tt> - белый цвет.<br><br>

<pre id="4morph"><span class="lnk" onmouseover="show('morph - превращаться, морф, оборотень')" onmouseout="hide()">morph()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Делает цвет изменяемым:
<pre>// javascript
color.morph('#000')</pre><br>

<pre id="4toHex"><span class="lnk" onmouseover="show('to hex - в шестнадцатиричный')" onmouseout="hide()">toHex()</span></pre>
<div class=list>возвращает - строку (<tt>string</tt>)</div>
Метод получает шестнадцатиричное значение цвета:
<pre>// javascript
color.toHex() // -> returns (возвращает) '#ff0066'</pre><br>

<pre id="4toRgb"><span class="lnk" onmouseover="show('to RGB - в (значение цвета в формате) RGB')" onmouseout="hide()">toRgb()</span></pre>
<div class=list>возвращает - строку (<tt>string</tt>)</div>
Метод получает значение цвета в виде строки RGB:
<pre>// javascript
color.toRgb() // -> returns (возвращает) 'rgb(255,0,102)'</pre></div><br>


<h4 id="5">SVG.Matrix</h4>
Матрицы в SVG.js имеют свой собственный класс <tt>SVG.Matrix</tt>, заключающий в себе собственный <tt>SVGMatrix</tt>.
Matrices in SVG.js have their own class `SVG.Matrix`, wrapping the native `SVGMatrix`. They add a lot of functionality like extracting transform values, matrix morphing and improvements on the native methods.<br><br>
В SVG.js матрицы принимают различные значения при инициализации.
In SVG.js, matrices accept various values on initialization.

Без значения:
<pre>// javascript
var matrix = new SVG.Matrix
matrix.toString() // -> returns matrix(1,0,0,1,0,0)
                  // -> возвращает матрицу (1,0,0,1,0,0)</pre>
Шесть аргументов:
<pre>// javascript
var matrix = new SVG.Matrix(1, 0, 0, 1, 100, 150)
matrix.toString() // -> returns matrix(1,0,0,1,100,150)
                  // -> возвращает матрицу (1,0,0,1,100,150)</pre>
Строковое значение:
<pre>// javascript
var matrix = new SVG.Matrix('1,0,0,1,100,150')
matrix.toString() // -> returns matrix(1,0,0,1,100,150)
                  // -> возвращает матрицу (1,0,0,1,100,150)</pre>
Значение - объект:
<pre>// javascript
var matrix = new SVG.Matrix({ a: 1, b: 0, c: 0, d: 1, e: 100, f: 150 })
matrix.toString() // -> returns matrix(1,0,0,1,100,150)
                  // -> возвращает матрицу (1,0,0,1,100,150)</pre>
Локальный <tt>SVGMatrix</tt>:
<pre>// javascript
var svgMatrix = svgElement.getCTM()
var matrix = new SVG.Matrix(svgMatrix)
matrix.toString() // -> returns matrix(1,0,0,1,0,0)
                  // -> возвращает матрицу (1,0,0,1,0,0)</pre>
Даже экземпляр <tt>SVG.Element</tt>:
<pre>// javascript
var rect = draw.rect(50, 25)
var matrix = new SVG.Matrix(rect)
matrix.toString() // -> returns matrix(1,0,0,1,0,0)
                  // -> возвращает матрицу (1,0,0,1,0,0)</pre>
<div class=blockindent><br>
<pre id="5around"><span class="lnk" onmouseover="show('around - вокруг')" onmouseout="hide()">around()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Выполняет преобразование заданной матрицы вокруг заданной центральной точки:
Performs a given matrix transformation around a given center point:
<pre>// javascript
// cx, cy, matrix
matrix.around(100, 150, new SVG.Matrix().skew(0, 45))</pre>
Матрица, переданная в качестве третьего аргумента, будет использоваться для умножения.
The matrix passed as the third argument will be used to multiply.<br><br>

<pre id="5at"><span class="lnk" onmouseover="show('at - предлог в')" onmouseout="hide()">at()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>

This method will morph the matrix to a given position between `0` and `1`:
<pre>// javascript
matrix.at(0.27)</pre>

This will only work when a destination matrix is defined using the `morph()` method.<br><br>

<pre id="5clone"><span class="lnk" onmouseover="show('clone - клон, клонировать')" onmouseout="hide()">clone()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Метод возвращает точную копию матрицы:
<pre>// javascript
matrix.clone()</pre><br>

<pre id="5extract"><span class="lnk" onmouseover="show('extract - извлекать, выделять')" onmouseout="hide()">extract()</span></pre>
<div class=list>возвращает - объект (<tt>object</tt>)</div>
Получает вычисленные значения матрицы, в виде объекта:
<pre>// javascript
matrix.extract()</pre>
Возвращаемый объект содержит следующие значения:
<div class=blockindent>
&nbsp; &#9679; &nbsp; <tt>x</tt> (перемещение по оси&nbsp;<tt>x</tt>)<br>
&nbsp; &#9679; &nbsp; <tt>y</tt> (перемещение по оси&nbsp;<tt>y</tt>)<br>
&nbsp; &#9679; &nbsp; <tt>skewX</tt> (рассчитанный наклон по оси&nbsp;<tt>x</tt>)<br>
&nbsp; &#9679; &nbsp; <tt>skewY</tt> (рассчитанный наклон по оси&nbsp;<tt>y</tt>)<br>
&nbsp; &#9679; &nbsp; <tt>scaleX</tt> (рассчитанный масштаб по оси&nbsp;<tt>x</tt>)<br>
&nbsp; &#9679; &nbsp; <tt>scaleY</tt> (рассчитанный масштаб по оси&nbsp;<tt>y</tt>)<br>
&nbsp; &#9679; &nbsp; <tt>rotation</tt> (рассчитанный поворот)</div><br>

<pre id="5flip"><span class="lnk" onmouseover="show('flip - переворот, кувырок')" onmouseout="hide()">flip()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Переворачивает матрицу по заданной оси:
<pre>// javascript
matrix.flip('x')</pre>
или
<pre>// javascript
matrix.flip('y')</pre>
По умолчанию, элементы переворачиваются через свою центральную точку. Положение оси переворота можно задать с помощью второго аргумента:
<pre>// javascript
matrix.flip('x', 150)</pre>
или
<pre>// javascript
matrix.flip('y', 100)</pre><br>

<pre id="5inverse"><span class="lnk" onmouseover="show('inverse - инверсия, противоположность, обратный порядок')" onmouseout="hide()">inverse()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Метод создает инвертированную матрицу:
<pre>// javascript
matrix.inverse()</pre><br>

<pre id="5morph"><span class="lnk" onmouseover="show('morph - превращать, морф, оборотень')" onmouseout="hide()">morph()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>

In order to animate matrices the `morph()` method lets you pass a destination matrix. This can be any value a `SVG.Matrix` would accept on initialization:
Это может быть любым значением <tt>SVG.Matrix</tt>, принятое
<pre>// javascript
matrix.morph('2,0,0,2,100,150')</pre><br>

<pre id="5multiply"><span class="lnk" onmouseover="show('multiply - умножать')" onmouseout="hide()">multiply()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Умножение данной матрицы с матрицей, переданной в аргументе:
<pre>// javascript
matrix.multiply(matrix2)</pre><br>

<pre id="5native"><span class="lnk" onmouseover="show('native - местный, локальный, родной')" onmouseout="hide()">native()</span></pre>
<div class=list>возвращает - <tt>SVGMatrix</tt></div>
Возвращает локальный <tt>SVGMatrix</tt>, извлеченный из экземпляра <tt>SVG.Matrix</tt>:
<pre>// javascript
matrix.native()</pre><br>

<pre id="5rotate"><span class="lnk" onmouseover="show('rotate - вращать, поворачивать')" onmouseout="hide()">rotate()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Поворачивает матрицу на угол в градусах, по одному заданному значению:
Rotates matrix by degrees with one value given:
<pre>// javascript
// degrees (градусы)
matrix.rotate(45)</pre>
Поворачивает матрицу на угол в градусах вокруг заданной точки, по трем значениям:
Rotates a matrix by degrees around a given point with three values:
<pre>// javascript
// degrees, cx, cy (градусы, координаты точки поворота по оси x и y)
matrix.rotate(45, 100, 150)</pre><br>

<pre id="5scale"><span class="lnk" onmouseover="show('scale - масштаб')" onmouseout="hide()">scale()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>
Равномерное масштабирование матрицы по одному, заданному значению:
Scales matrix uniformal with one value:
<pre>// javascript
// scale (масштаб)
matrix.scale(2)</pre>
Неравномерное масштабирование матрицы по двум значениям:
Scales matrix non-uniformal with two values:
<pre>// javascript
// scaleX, scaleY (масштаб по оси X, масштаб по оси Y)
matrix.scale(2, 3)</pre>

Scales matrix uniformal on a given center point with three values:
<pre>// javascript
// scale, cx, cy (масштаб, координаты точки по оси x и y)
matrix.scale(2, 100, 150)</pre>

Scales matrix non-uniformal on a given center point with four values:
<pre>// javascript
// scaleX, scaleY, cx, cy
matrix.scale(2, 3, 100, 150)</pre><br>

<pre id="5skew"><span class="lnk" onmouseover="show('skew - наклон')" onmouseout="hide()">skew()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>

Skews matrix a given degrees over x and or y axis with two values:
<pre>// javascript
// degreesX, degreesY
matrix.skew(0, 45)</pre>

Skews matrix a given degrees over x and or y axis on a given point with four values:
<pre>// javascript
// degreesX, degreesY, cx, cy
matrix.skew(0, 45, 150, 100)</pre><br>

<pre id="5toString"><span class="lnk" onmouseover="show('to string - в строку')" onmouseout="hide()">toString()</span></pre>
<div class=list>возвращает - строку (<tt>string</tt>)</div>

Converts the matrix to a transform string:
<pre>// javascript
matrix.toString()
// -> matrix(1,0,0,1,0,0)</pre><br>

<pre id="5translate"><span class="lnk" onmouseover="show('translate - перевод, перенос')" onmouseout="hide()">translate()</span></pre>
<div class=list>возвращает - <tt>SVG.Matrix</tt></div>

Translates matrix by a given x and y value:
<pre>// javascript
matrix.translate(10, 20)</pre></div><br>


<h4 id="6">SVG.Number</h4>
Числа в SVG.js имеют специальный класс чисел, чтобы можно было обрабатывать строковые значения.
Numbers in SVG.js have a dedicated number class to be able to process string values.<br>
Создать новое число очень просто:
<pre>// javascript
var number = new SVG.Number('78%')
number.plus('3%').toString() // -> returns (возвращает) '81%'
number.valueOf() // -> returns (возвращает) 0.81</pre>

Operators are defined as methods on the `SVG.Number` instance.
<div class=blockindent><br>
<pre id="6at"><span class="lnk" onmouseover="show('at - предлог в')" onmouseout="hide()">at()</span></pre>
<div class=list>возвращает - <tt>SVG.Number</tt></div>
Получает трансформируемое число в заданной позиции:
<pre>// javascript
var number = new SVG.Number('79%').morph('3%')
number.at(0.55).toString() // -> '37.2%'</pre><br>

<pre id="6divide"><span class="lnk" onmouseover="show('divide - делить')" onmouseout="hide()">divide()</span></pre>
<div class=list>возвращает - <tt>SVG.Number</tt></div>
Деление:
<pre>// javascript
number.divide('3%')</pre><br>

<pre id="6minus"><span class="lnk" onmouseover="show('minus - минус')" onmouseout="hide()">minus()</span></pre>
<div class=list>возвращает - <tt>SVG.Number</tt></div>
Вычитание:
<pre>// javascript
number.minus('3%')</pre><br>

<pre id="6morph"><span class="lnk" onmouseover="show('morph - превращать, морф, оборотень')" onmouseout="hide()">morph()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Делает число трансформируемым:
<pre>// javascript
number.morph('11%')</pre><br>

<pre id="6plus"><span class="lnk" onmouseover="show('plus - плюс')" onmouseout="hide()">plus()</span></pre>
<div class=list>возвращает - <tt>SVG.Number</tt></div>
Сложение:
<pre>// javascript
number.plus('3%')</pre><br>

<pre id="6times"><span class="lnk" onmouseover="show('times - разы')" onmouseout="hide()">times()</span></pre>
<div class=list>возвращает - <tt>SVG.Number</tt></div>
Умножение:
<pre>// javascript
number.times(2)</pre><br>

<pre id="6to"><span class="lnk" onmouseover="show('to - предлог к, на')" onmouseout="hide()">to()</span></pre>
<div class=list>возвращает - <tt>SVG.Number</tt></div>
Изменяет число на другую единицу
<pre>// javascript
number.to('px')</pre></div><br><br>


<h4 id="7">SVG.Set</h4>
Наборы (<tt>set</tt>) пригодятся там, где нужно изменить или анимировать несколько элементов одновременно.
Набор будет принимать все, те же самые методы, доступные для отдельных элементов, даже те, что добавляются с помощью своих собственных плагинов!<br>
Создание набора именно таково, как и ожидалось:
<pre>// javascript
// create some elements (создадим несколько элементов)
var rect = draw.rect(100,100)
var circle = draw.circle(100).move(100,100).fill('#f09')<br>
// create a set and add the elements
// создадим набор и добавим в него элементы
var set = draw.set()
set.add(rect).add(circle)<br>
// change the fill of all elements in the set at once
// изменим цвет заливки сразу всех элементов набора
set.fill('#ff0')</pre>
Одиночный элемент может быть частью нескольких наборов. Также наборы не имеют структурного представления, на самом деле это просто необычные массивы.
<div class=blockindent><br>
<pre id="7add"><span class="lnk" onmouseover="show('add - добавить, сложить')" onmouseout="hide()">add()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Добавляет элемент в набор (<tt>set</tt>):
<pre>// javascript
set.add(rect)</pre>
Очень полезным свойством наборов является возможность одновременного принятия нескольких элементов:
<pre>// javascript
set.add(rect, circle)</pre><br>

<pre id="7animate"><span class="lnk" onmouseover="show('animate - анимировать')" onmouseout="hide()">animate()</span></pre>
<div class=list>возвращает - <tt>SVG.SetFX</tt></div>
Устанавливает работу с анимацией:
<pre>// javascript
set.animate(3000).fill('#ff0')</pre><br>

<pre id="7bbox"><span class="lnk" onmouseover="show('b(ounding) box - ограничительная рамка')" onmouseout="hide()">bbox()</span></pre>
<div class=list>возвращает - <tt>SVG.BBox</tt></div>
Получает ограничительную рамку для всех элементов набора (<tt>set</tt>):
<pre>// javascript
set.bbox()</pre><br>

<pre id="7clear"><span class="lnk" onmouseover="show('clear - очистить')" onmouseout="hide()">clear()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Метод удаляет все элементы из набора (<tt>set</tt>):
<pre>// javascript
set.clear()</pre><br>

<pre id="7each"><span class="lnk" onmouseover="show('each - каждый, всякий, любой')" onmouseout="hide()">each()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Последовательный перебор всех элементов набора, точно такой же, как у svg-контейнеров (т.е. &#60;a&#62;, &#60;defs&#62;, &#60;g&#62;, &#60;marker&#62;, &#60;mask&#62;, &#60;missing-glyph&#62;, &#60;pattern&#62;, &#60;svg&#62;, &#60;switch&#62;, &#60;symbol&#62;):
<pre>// javascript
set.each(function(i) {
  this.attr('id', 'shiny_new_id_' + i)
})</pre>
Обратите внимание, здесь <tt>this</tt> относится к текущему дочернему элементу.<br><br>

<pre id="7first"><span class="lnk" onmouseover="show('first - первый')" onmouseout="hide()">first()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Получает первый элемент:
<pre>// javascript
set.first()</pre><br>

<pre id="7get"><span class="lnk" onmouseover="show('get - получить')" onmouseout="hide()">get()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Получает элемент по указанному индексу:
<pre>// javascript
set.get(1)</pre><br>

<pre id="7has"><span class="lnk" onmouseover="show('has - имеет')" onmouseout="hide()">has()</span></pre>
<div class=list>возвращает - логическое значение (<tt>boolean</tt>)</div>
Метод определяет, является ли элемент частью набора (<tt>set</tt>):
<pre>// javascript
set.has(rect)</pre><br>

<pre id="7index"><span class="lnk" onmouseover="show('index - индекс')" onmouseout="hide()">index()</span></pre>
<div class=list>возвращает - число (<tt>number</tt>)</div>
Возвращает индекс заданного элемента в наборе (<tt>set</tt>):
<pre>// javascript
set.index(rect) // -> -1 if element is not a member
                // -> -1 если элемент не является частью набора</pre><br>

<pre id="7last"><span class="lnk" onmouseover="show('last - последний')" onmouseout="hide()">last()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Получает последний элемент:
<pre>// javascript
set.last()</pre><br>

<pre id="7remove"><span class="lnk" onmouseover="show('remove - удалить')" onmouseout="hide()">remove()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Метод удаляет элемент из набора (<tt>set</tt>):
<pre>// javascript
set.remove(rect)</pre></div><br>


<h4 id="8">SVG.Point</h4>
Класс SVG.Point возвращается <tt><a href="manipulating.htm#12point" onmouseover="show('Метод <tt>point()</tt> преобразует координаты точки<br>из системы координат экрана в систему координат элементов.')" onmouseout="hide()">point()</a></tt>, а также хорош для создания векторов.<br>
Конструктор может принимать координаты в разных формах:
<pre>// javascript
var vector1 = new SVG.Point(1)
var vector2 = new SVG.Point(1,1)
var vector3 = new SVG.Point([1,1])
var vector4 = new SVG.Point({x:1,y:1})
var vector5 = new SVG.Point(new SVG.Point(1,1))</pre>
<div class=blockindent><br>
<pre id="8at"><span class="lnk" onmouseover="show('at - предлог в')" onmouseout="hide()">at()</span></pre>
<div class=list>возвращает - <tt>SVG.Point</tt></div>
Получает координаты трансформируемой точки в заданной позиции:
Get morphable point at given position:
<pre>// javascript
var point = new SVG.Point(1,1).morph(11,10)
point.at(0.5) // -> {x: 6, y: 5.5}</pre><br>

<pre id="8clone"><span class="lnk" onmouseover="show('clone - клон, клонировать')" onmouseout="hide()">clone()</span></pre>
<div class=list>возвращает - <tt>SVG.Point</tt></div>
Получает новую <tt>SVG.Point</tt> с теми же самыми значениями координат&nbsp;<tt>x</tt> и&nbsp;<tt>y</tt>.
<pre>// javascript
var newPoint = new SVG.Point(1,1).clone()</pre><br>

<pre id="8morph"><span class="lnk" onmouseover="show('morph - морф, оборотень, превращаться')" onmouseout="hide()">morph()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>

Set the point to be morphable. Usually used with the `at()` method:
<pre>// javascript
var point = new SVG.Point(1,1).morph(11,10)
point.at(0.5) // -> {x: 6, y: 5.5}</pre><br>

<pre id="8native"><span class="lnk" onmouseover="show('native - родной, местный, естественный')" onmouseout="hide()">native()</span></pre>
<div class=list>возвращает - <tt>SVGPoint</tt></div>

Creates a native SVGPoint object outside of any document trees.
The object is initialized to the SVG.Point point.
<pre>// javascript
var point = new SVG.Point(1,1).native()
console.log(point) // -> SVGPoint {x: 1, y: 1}</pre><br>

<pre id="8transform"><span class="lnk" onmouseover="show('transform - преобразование, превращение')" onmouseout="hide()">transform()</span></pre>
<div class=list>возвращает - <tt>SVG.Point</tt></div>
Преобразование точки с помощью матрицы без изменения исходной точки:
<pre>// javascript
var point = new SVG.Point(1,1)
point.transform(new SVG.Matrix().skew(0, 45)) // -> {x: 1, y: 2}</pre></div><br>

<br><br>
</body></html>
