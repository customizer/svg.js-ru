<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>svg.js Справочное руководство</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>

<body>
<h3>Обращение</h3>
Можно получать элемент, созданный с помощью SVG.js, по его идентификатору (<tt>id</tt>). Существует два способа выбора элементов используя CSS-селекторы.<br><br>

<h4 id="1">С помощью идентификатора (<tt>id</tt>)</h4>
<div class=blockindent><br>
<pre id="1SVG.get"><span class="lnk" onmouseover="show('SVG get - получить элемент SVG')" onmouseout="hide()"><span class="shadow">SVG.</span>get()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt> (или наиболее соответствующий подкласс из <tt>SVG.Element</tt>)</div>
Если нужно получить элемент, созданный с помощью SVG.js, по его идентификатору (<tt>id</tt>), можно воспользоваться методом <tt>SVG.get()</tt>:
<pre>// javascript
var element = SVG.get('my_element')<br>
element.fill('#f06')</pre></div><br>

<h4 id="2">При помощи CSS-селекторов</h4>
<div class=blockindent><br>
<pre id="2SVG.select"><span class="lnk" onmouseover="show('SVG select - выбрать элемент SVG')" onmouseout="hide()"><span class="shadow">SVG.</span>select()</span></pre>
<div class=list>возвращает - <tt>SVG.Set</tt></div>
Этот метод выполнит поиск всех svg-элементов в документе и возвратит их в экземпляре <tt>SVG.Set</tt>:
<pre>// javascript
var elements = SVG.select('rect.my-class').fill('#f06')</pre>
Кроме того, можно передать второй аргумент для определения родительского элемента для поиска:
<pre>// javascript
var elements = SVG.select('rect.my-class', group).fill('#f06')</pre><br>

<pre id="2element.select"><span class="lnk" onmouseover="show('element select - выбрать элемент')" onmouseout="hide()"><span class="shadow">element.</span>select()</span></pre>
<div class=list>возвращает - <tt>SVG.Set</tt></div>
Аналогично методу <tt>SVG.select()</tt>, элементы можно выбрать также и в дочернем элементе:
<pre>// javascript
var elements = group.select('rect.my-class').fill('#f06')</pre>
Этот метод доступен для всех <a href="parents.htm" onmouseover="show('')" onmouseout="hide()">родительских классов</a>, наследуемых от <tt>SVG.Parent</tt>.</div><br><br>


<h4 id="3">Существующие элементы DOM</h4>
<div class=blockindent><br>
<pre id="3SVG.adopt"><span class="lnk" onmouseover="show('SVG adopt - принять')" onmouseout="hide()"><span class="shadow">SVG.</span>adopt()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Если нужно, чтобы SVG.js принял существующий элемент DOM, можно воспользоваться методом <tt>SVG.adopt()</tt>.
<pre>// javascript
var polygon = document.createElement('polygon')<br>
var element = SVG.adopt(polygon)<br>
element.fill('#f06')</pre></div><br>


<h4 id="4">При помощи jQuery или Zepto</h4>
Ещё один способ - использовать <a href="http://jquery.com/" target="_blank">jQuery</a> или <a href="http://zeptojs.com/" target="_blank">Zepto</a>.<br>
Вот пример:
<pre>// javascript
// add elements (добавить элементы)
var draw   = SVG('drawing')
var group  = draw.group().addClass('my-group')
var rect   = group.rect(100,100).addClass('my-element')
var circle = group.circle(100).addClass('my-element').move(100, 100)<br>
// get elements in group (получить элементы группы)
var elements = $('#drawing g.my-group .my-element').each(function() {
  this.instance.animate().fill('#f09')
})</pre><br><br>


<h4 id="5">Круговые ссылки</h4>
Every element instance within SVG.js has a reference to the actual `node`.
<div class=blockindent><br>
<pre id="5node"><span class="lnk" onmouseover="show('node - узел, нода')" onmouseout="hide()">node</span></pre>
<div class=list>возвращает - <tt>SVGElement</tt></div>
<pre>// javascript
element.node</pre><br>

<pre id="5native"><span class="lnk" onmouseover="show('native - местный, родной, естественный')" onmouseout="hide()">native()</span></pre>
<div class=list>возвращает - <tt>SVGElement</tt></div>
<pre>// javascript
element.node</pre><br>

<pre id="5instance"><span class="lnk" onmouseover="show('instance - экземпляр, пример, отдельный случай')" onmouseout="hide()">instance</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Аналогично, <tt>node</tt> содержит ссылку на <tt>instance</tt> SVG.js:
<pre>// javascript
node.instance</pre>
<b>Обратите внимание на разницу в возвращаемых значениях.</b><br>
<tt>node</tt> ссылается на местный <tt>SVGElement</tt>, а <tt>instance</tt> ссылается на экземпляр <tt>SVG.Element</tt>.</div><br><br>


<h4 id="6">Дочерние ссылки</h4>
<div class=blockindent><br>
<pre id="6children"><span class="lnk" onmouseover="show('children - дети')" onmouseout="hide()">children()</span></pre>
<div class=list>возвращает - массив (<tt>array</tt>)</div>
С помощью метода <tt>children</tt> можно получить массив всех дочерних элементов (потомков).
<pre>// javascript
draw.children()</pre><br>

<pre id="6clear"><span class="lnk" onmouseover="show('clear - очистить')" onmouseout="hide()">clear()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Для удаления всех элементов из родительского элемента:
<pre>// javascript
draw.clear()</pre><br>

<pre id="6each"><span class="lnk" onmouseover="show('each - каждый')" onmouseout="hide()">each()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Метод <tt>each()</tt> позволяет перебирать все дочерние элементы родительского элемента:
<pre>// javascript
draw.each(function(i, children) {
  this.fill({ color: '#f06' })
})</pre>
Также возможен глубокий обход, для которого нужно передать методу в качестве второго аргумента значение <tt>true</tt>.
<pre>// javascript
// draw.each(block, deep)
draw.each(function(i, children) {
  this.fill({ color: '#f06' })
}, true)</pre>
<div class=note><b>Примечание:</b> <tt>this</tt> относится к текущему дочернему элементу.</div><br>

<pre id="6first"><span class="lnk" onmouseover="show('first - первый')" onmouseout="hide()">first()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Метод получает первый элемент в родительском элементе:
<pre>// javascript
draw.first()</pre><br>

<pre id="6get"><span class="lnk" onmouseover="show('get - получить')" onmouseout="hide()">get()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Получает элемент в заданной позиции в массиве дочерних элементов:
<pre>// javascript
var rect   = draw.rect(20, 30)
var circle = draw.circle(50)<br>
draw.get(0) //-> returns rect (возвращает прямоугольник)
draw.get(1) //-> returns circle (возвращает круг)</pre><br>

<pre id="6has"><span class="lnk" onmouseover="show('has - имеет')" onmouseout="hide()">has()</span></pre>
<div class=list>возвращает - логическое значение (<tt>boolean</tt>)</div>
Проверка существования элемента внутри родительского элемента:
<pre>// javascript
var rect  = draw.rect(100, 50)
var group = draw.group()<br>
draw.has(rect)  //-> returns true (возвращает значение true)
group.has(rect) //-> returns false (возвращает значение false)</pre><br>

<pre id="6index"><span class="lnk" onmouseover="show('index - индекс')" onmouseout="hide()">index()</span></pre>
<div class=list>возвращает - число (<tt>number</tt>)</div>
Метод возвращает индекс заданного элемента и возвращает&nbsp;<tt>-1</tt>, когда заданный элемент не является дочерним элементом.
<pre>// javascript
var rect  = draw.rect(100, 50)
var group = draw.group()<br>
draw.index(rect)  //-> returns 0 (возвращает 0)
group.index(rect) //-> returns -1 (возвращает -1)</pre>

<pre id="6last"><span class="lnk" onmouseover="show('last - последний')" onmouseout="hide()">last()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Метод для получения последнего дочернего элемента в родительском элементе:
<pre>// javascript
draw.last()</pre></div><br><br>


<h4 id="7">Родительские ссылки</h4>
С помощью метода <tt>parent()</tt> каждый элемент имеет ссылку на свой родительский элемент:
<div class=blockindent><br>
<pre id="7doc"><span class="lnk" onmouseover="show('doc - документ')" onmouseout="hide()">doc()</span></pre>
<div class=list>возвращает - <tt>SVG.Doc</tt></div>
Метод <tt>doc()</tt> можно использовать для получения корневого SVG:
<pre>// javascript
var draw = SVG('drawing')
var rect = draw.rect(100, 100)<br>
rect.doc() //-> returns draw (возвращает draw - рисование)</pre><br>

<pre id="7parent_within"><span class="lnk" onmouseover="show('parent - родитель')" onmouseout="hide()">parent()</span>  <i class=low>внутри svg-документа</i></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
<pre>// javascript
element.parent()</pre>
Кроме того, в качестве первого аргумента можно передать класс или селектор CSS:
<pre>// javascript
var draw   = SVG('drawing')
var nested = draw.nested().addClass('test')
var group  = nested.group()
var rect   = group.rect(100, 100)<br>
rect.parent()           //-> returns group  (возвращает group - группу)
rect.parent(SVG.Doc)    //-> returns draw   (возвращает draw - рисование)
rect.parent(SVG.Nested) //-> returns nested (возвращает nested - вложенное)
rect.parent(SVG.G)      //-> returns group  (возвращает group - группу)
rect.parent('.test')    //-> returns nested (возвращает nested - вложенное)</pre><br>

<pre id="7parent_topmost"><span class="lnk" onmouseover="show('parent - родитель')" onmouseout="hide()">parent()</span>  <i class=low>на самом верхнем svg-документе</i></pre>
<div class=list>возвращает - <tt>HTMLNode</tt></div>
<pre>// javascript
var draw = SVG('drawing')<br>
draw.parent() //-> returns the wrapping html element with id 'drawing'
              //-> возвращает html элемент-упаковку с идентификатором 'drawing'</pre><br>

<pre id="7parents"><span class="lnk" onmouseover="show('parents - родители')" onmouseout="hide()">parents()</span></pre>
<div class=list>возвращает - массив (<tt>array</tt>)</div>
Метод применяется для получения всех предков элемента, отфильтрованных по типу или CSS-селектору (смотрите метод <tt>parent()</tt>).
<pre>// javascript
var group1 = draw.group().addClass('test')
  , group2 = group1.group()
  , rect   = group2.rect(100,100)<br>
rect.parents()        // returns (возвращает) [group1, group2, draw]
rect.parents('.test') // returns (возвращает) [group1]
rect.parents(SVG.G)   // returns (возвращает) [group1, group2]</pre></div><br><br>


<h4 id="8"><a href="https://ru.wikipedia.org/wiki/URI" target="_blank" onmouseover="show('URI (сокращ. англ. слов Uniform Resource Identifier) —<br>унифицированный (единообразный) идентификатор ресурса.<br>URI — последовательность символов, идентифицирующая<br>абстрактный или физический ресурс. Ранее назывался<br>Universal Resource Identifier — универсальный<br>идентификатор ресурса.')" onmouseout="hide()">URI</a> ссылки</h4>
В тех случаях, когда один элемент связан с другим через атрибут, экземпляр связанного элемента можно получить с помощью метода <tt>reference()</tt>.
<div class=blockindent><br>
<pre id="8reference"><span class="lnk" onmouseover="show('reference - ссылка, обращение')" onmouseout="hide()">reference()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Единственное, что требуется, это имя атрибута:
<pre>// javascript
use.reference('href') //-> returns used element instance
                      //-> возвращает используемый экземпляр элемента
// or (или)
rect.reference('fill') //-> returns gradient or pattern instance for example
                       //-> возвращает градиент или например, образец шаблона
// or (или)
circle.reference('clip-path') //-> returns clip instance (возвращает экземпляр вырезки)</pre></div><br><br>

<br><br>
</body></html>
