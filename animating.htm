<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>svg.js Справочное руководство</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>

<body>
<h3 id="1">Анимация</h3>
Анимация элементов очень похожа на управление элементами с помощью метода <tt>attr()</tt>. Отличие только в том, что нужно включать метод <tt>animate()</tt>.<br><br>

<h5>Цепочки методов</h5>
Обратите внимание, что метод <tt>animate()</tt> не будет возвращать целевой элемент, а возвратит экземпляр <tt>SVG.FX</tt>, который будет использовать следующие методы:<br>
Конечно же <tt>attr()</tt>:
<pre>// javascript
rect.animate().attr({ fill: '#f03' })</pre>
Методы <tt>x()</tt>, <tt>y()</tt> и <tt>move()</tt>:
<pre>// javascript
rect.animate().move(100, 100)</pre>
А также методы <tt>cx()</tt>, <tt>cy()</tt> и <tt>center()</tt>:
<pre>rect.animate().center(200, 200)</pre>
Или методы преобразования:
<pre>// javascript
rect.animate().rotate(45).skew(25, 0)</pre>
С помощью метода <tt>attr()</tt> также можно анимировать и значения с нечисловыми единицами:
<pre>// javascript
rect.attr('x', '10%').animate().attr('x', '50%')</pre><br>

<h5>Плавность анимации</h5>
Все доступные типы плавности течения анимации:
<div class=list> <tt>&#60;&#62;</tt> - плавное начало и окончание, т.е. анимация начинается медленно, затем ускоряется и к концу движения опять замедляется</div>
<div class=list> <tt>&#62;</tt> - плавное окончание( начинается быстро, к концу замедляется)</div>
<div class=list> <tt>&#60;</tt> - плавное начало (медленно начинается, к концу ускоряется)</div>
<div class=list> <tt>-</tt> - линейная, т.е. скорость анимации одинакова от начала и до конца</div>
<div class=list> <tt>=</tt> - внешнее управление</div>
<div class=list> <tt>a</tt> - функция.</div>
Для последнего типа вот пример функции, использующейся по умолчанию - <tt>&#60;&#62;</tt>:
<pre>// javascript
function(pos) { return (-Math.cos(pos * Math.PI) / 2) + 0.5 }</pre>
Для большего числа уравнений плавности посмотрите плагин <a href="https://github.com/svgdotjs/svg.easing.js" target="_blank">svg.easing.js</a>.<br>


<div class=blockindent><br>
<pre id="1animate"><span class="lnk" onmouseover="show('animate - анимация')" onmouseout="hide()">animate()</span></pre>
<div class=list>возвращает - <tt>SVG.FX</tt></div>
<pre>// javascript
rect.animate().move(150, 150)</pre>
Метод <tt>animate()</tt> будет принимать три аргумента. Первый - <tt>duration</tt> (продолжительность), второй - <tt>ease</tt> (плавность) и третий - <tt>delay</tt> (задержка):
<pre>// javascript
rect.animate(2000, '>', 1000).attr({ fill: '#f03' })</pre>
Кроме того, можно в качестве первого аргумента передать объект:
<pre>// javascript
rect.animate({ ease: '&#60;', delay: '1.5s' }).attr({ fill: '#f03' })</pre>
По умолчанию значение для <tt>duration</tt> устанавливается как <tt>1000</tt>, для <tt>ease</tt> будет установлено <tt>&#60;&#62;</tt>.
Можно объединять несколько анимаций вместе повторным вызовом <tt>animate</tt>:
<pre>// javascript
rect.animate({ ease: '&#60;', delay: '1.5s' }).attr({ fill: '#f03' }).animate().dmove(50,50)</pre><br>

<pre id="1situation"><span class="lnk" onmouseover="show('situation - ситуация, положение, обстановка')" onmouseout="hide()">situation</span></pre>
<div class=list>возвращает - объект</div>
Текущая ситуация анимации хранится в объекте <tt>situation</tt>:
<pre>// javascript
rect.animate(3000).move(100, 100)
rect.fx.situation //-> everything is in here (все здесь)</pre>
Доступные значения:
<div class=list> <tt>start</tt> (время старта как число в миллисекундах)</div>
<div class=list> <tt>play</tt> (проигрывать анимацию или нет; значения <tt>true</tt> или <tt>false</tt>)</div>
<div class=list> <tt>pause</tt> (время, когда анимация последний раз приостанавливалась, т.е. время последней паузы)</div>
<div class=list> <tt>duration</tt> (выбранная продолжительность анимации)</div>
<div class=list> <tt>ease</tt> (выбранный расчет плавности)</div>
<div class=list> <tt>finish</tt> (<tt>start</tt> + <tt>duration</tt>)</div>
<div class=list> <tt>loop</tt> (текущий цикл; <tt>true</tt>, <tt>false</tt> или число; если число, то это обратный отсчет)</div>
<div class=list> <tt>loops</tt> (количество циклов; <tt>true</tt>, <tt>false</tt> или число; если число, то это общее количество циклов)</div>
<div class=list> <tt>reverse</tt> (должна ли анимация выполняться в обратном направлении)</div>
<div class=list> <tt>reversing</tt> (значение <tt>true</tt>, если цикл в настоящий момент реверсивный, в противном случае - <tt>false</tt>)</div><br>

<pre id="1target"><span class="lnk" onmouseover="show('target - цель')" onmouseout="hide()">target()</span></pre>
<div class=list>возвращает - <tt>SVG.Element</tt></div>
Метод <tt>target()</tt> возвращает элемент, к которому применяется анимация:
<pre>// javascript
rect.fx.target() // returns rect (возвращает rect - прямоугольник)</pre></div><br><br>


<h3 id="2">Управление</h3>
<div class=blockindent><br>
<pre id="2finish"><span class="lnk" onmouseover="show('finish - конец, финиш')" onmouseout="hide()">finish()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Этот метод завершает всю цепочку анимации целиком. Все значения устанавливаются соответственно их конечным значениям и полностью выполняется каждое положение.
<pre>// javascript
rect.animate().move(200, 200).animate().dmove(50,50).size(300,400)

rect.finish() // rect at 250,250 with size 300,400
              // прямоугольник в 250,250 размером 300,400</pre><br>

<pre id="2pause"><span class="lnk" onmouseover="show('pause - пауза, перерыв, приостановка')" onmouseout="hide()">pause()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Приостановка выполнения анимации очень проста:
<pre>// javascript
rect.animate().move(200, 200)<br>
rect.mouseover(function() { this.pause() })</pre><br>

<pre id="2play"><span class="lnk" onmouseover="show('play - воспроизведение, исполнение, игра')" onmouseout="hide()">play()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Запускаем воспроизведение приостановленной анимации (т.е. анимации, установленной на паузу):
<pre>// javascript
rect.animate().move(200, 200)<br>
rect.mouseover(function() { this.pause() })
rect.mouseout(function() { this.play() })</pre><br>

<pre id="2reverse"><span class="lnk" onmouseover="show('reverse - реверс, задний ход, обратная сторона')" onmouseout="hide()">reverse()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Переключает направление анимации или устанавливает его в определенном направлении:
<pre>// javascript
// will run from 100,100 to rects initial position
// задаем направление анимации прямоугольника от 100,100 к начальной позиции
rect.animate(3000).move(100, 100).reverse()<br>
// sets direction to backwards (задаем обратное направление)
rect.animate(3000).move(100, 100).reverse(true)<br>
// sets direction to forwards (same as not calling reverse ever)
// задаем направление вперед (как будто, вообще не было reverse)
rect.animate(3000).move(100, 100).reverse(false)</pre><br>

<pre id="2stop"><span class="lnk" onmouseover="show('stop - стоп, остановка, прекращение')" onmouseout="hide()">stop()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Если нужно просто остановить ход анимации, можно вызвать метод <tt>stop()</tt>, у которого есть два дополнительных аргумента:
<div class=blockindent>
&nbsp; &#9679; &nbsp; <tt><span class="lnk" onmouseover="show('jump to end - перейти к концу')" onmouseout="hide()">jumpToEnd</span></tt>: устанавливает значения как конечные для данной анимации<br>
&nbsp; &#9679; &nbsp; <tt><span class="lnk" onmouseover="show('clear queue - очистить очередь')" onmouseout="hide()">clearQueue</span></tt>: удаляет все элементы в очереди.</div>
<pre>// javascript
rect.animate().move(200, 200)<br>
rect.stop()
// or e.g. (или, например,)
rect.stop(true)</pre>
Остановка анимации необратима.</div><br><br>


<h3 id="3">Расчет времени (тайминг)</h3>
<div class=blockindent><br>
<pre id="3at"><span class="lnk" onmouseover="show('at - предлог в')" onmouseout="hide()">at()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Допустим, нужно контролировать положение анимации с внешним событием и здесь метод <tt>at()</tt> окажется очень полезным:
<pre>// javascript
var animation = draw.rect(100, 100).move(50, 50).animate('=').move(200, 200)<br>
document.onmousemove = function(event) {
  animation.at(event.clientX / 1000)
}</pre>
Значением, переданным в качестве первого аргумента <tt>at()</tt>, должно быть число от&nbsp;<tt>0</tt> до&nbsp;<tt>1</tt>, где&nbsp;<tt>0</tt> - начало анимации, а&nbsp;<tt>1</tt> - конец.
Обратите внимание, что любые значения меньше&nbsp;<tt>0</tt> и больше&nbsp;<tt>1</tt> будут <span class="lnk" onmouseover="show('т.е. значения меньше 0 будут равны 0,<br>а значения больше 1 - равны 1')" onmouseout="hide()">нормализованы</span>.<br>
Отметьте также, что после вызова функции значение уменьшается. Следовательно позиция указывает положение анимации во времени, а не в пространстве.<br><br>

<pre id="3delay"><span class="lnk" onmouseover="show('delay - задержка, отсрочка')" onmouseout="hide()">delay()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Кроме того, можно вызвать метод <tt>delay()</tt>, который установит задержку в миллисекундах перед запуском анимации, следующей в очереди:
<pre>// javascript
rect.animate({ ease: '&#60;', delay: '1.5s' }).attr({ fill: '#f03' }).delay(500).animate().dmove(50,50)</pre><br>

<pre id="3loop"><span class="lnk" onmouseover="show('loop - цикл, петля')" onmouseout="hide()">loop()</span></pre>
<div class=list>возвращает - <tt>SVG.FX</tt></div>
По умолчанию, метод <tt>loop()</tt> создает бесконечный цикл:
<pre>// javascript
rect.animate(3000).move(100, 100).loop()</pre>
Также можно создать цикл с заданным числом повторений:
<pre>// javascript
rect.animate(3000).move(100, 100).loop(3)</pre>
Циклы идут от начала до конца и опять начинаются сначала (<tt>0->1.0->1.0->1.</tt>).
<div class=note_trans><b>Примечание переводчика:</b> в скобках условно показано направление анимации: 0&nbsp;-&nbsp;начало, 1&nbsp;-&nbsp;конец, точка - остановка.</div>
Также имеется и флаг реверса, который можно передать в качестве второго аргумента:
<pre>// javascript
rect.animate(3000).move(100, 100).loop(3, true)</pre>
Циклы будут полностью реверсироваться перед каждым новым стартом (<tt>0->1->0->1->0->1.</tt>).<br><br>

<pre id="3once"><span class="lnk" onmouseover="show('once - один раз, однажды')" onmouseout="hide()">once()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Наконец, можно выполнять действие в определенной позиции только один раз. Просто передайте методу <tt>once</tt> позицию и функцию, которая должна быть выполнена.
Также можно выбрать, будет ли передаваемая позиция обрабатываться как позиция во времени (плавность не применяется) или позиция в пространстве (плавность применяется):
<pre>// javascript
// the 0.5 is handled as uneased value (you can omit the false)
// половина анимации обрабатывается без применения плавности (значение false можно не указывать)
rect.animate(3000).move(100, 100).once(0.5, function(pos, eased) {
  // do something (здесь делается что-нибудь)
}, false)</pre>

<pre>// javascript
// the 0.5 is handled as eased value
// половина анимации обрабатывается без применения плавности
rect.animate(3000).move(100, 100).once(0.5, function(pos, eased) {
  // do something (здесь делается что-нибудь)
}, true)</pre>
Функция обратного вызова получает текущую позицию без применения плавности и делает её плавной.<br><br>

<pre id="3queue"><span class="lnk" onmouseover="show('queue - очередь')" onmouseout="hide()">queue()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Если нужно вызвать пользовательскую функцию между двумя связанными анимациями, можно просто поставить их в очередь:
<pre>// javascript
rect.animate({ ease: '&#60;', delay: '1.5s' }).attr({ fill: '#f03' }).queue(function(){<br>
  this.target().fill('#000')
  this.dequeue() // dont forget to call dequeue when the queue should continue running
                 // не забудьте вызвать dequeue, когда очередь должна продолжить работу<br>
}).animate().dmove(50,50)</pre></div><br><br>


<h3 id="4">Функции обратного вызова</h3>
<div class=blockindent><br>

<pre id="4after"><span class="lnk" onmouseover="show('after - после, after all - после всего')" onmouseout="hide()">after / afterAll()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Далее можно добавлять методы обратного вызова при помощи <tt>after()</tt>/<tt>afterAll()</tt>:
<pre>// javascript
rect.animate(3000).move(100, 100).after(function(situation) {
  this.animate().attr({ fill: '#f06' })
})<br>
// or (или)
rect.animate(3000).move(100, 100).afterAll(function() {
  this.animate().attr({ fill: '#f06' })
})</pre>
В качестве первого параметра функция получает ситуацию по завершении анимации. Это не относится к методу <tt>afterAll()</tt>, которому никаких параметров не передается.<br>
Обратите внимание на то, что методы <tt>after()</tt>/<tt>afterAll()</tt> никогда не будут вызываться, если анимация запущена как бесконечный цикл.<br>
Методы <tt>after()</tt>/<tt>afterAll()</tt> можно вызывать несколько раз для увеличения количества выполняемых функций.<br><br>

<pre id="4during"><span class="lnk" onmouseover="show('during - во время, during all - во время всего')" onmouseout="hide()">during / duringAll()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>
Если во время одной анимации (или всех анимаций) нужно выполнить свои собственные действия, можно воспользоваться методом <tt>during()</tt>/<tt>duringAll()</tt>:
<pre>// javascript
var position
  , from = 100
  , to   = 300<br>
rect.animate(3000).move(100, 100).during(function(pos, morph, eased, situation) {
  position = from + (to - from) * pos
})<br>
// or (или)
rect.animate(3000).move(100, 100).duringAll(function(pos, morph, eased, situation) {
  position = from + (to - from) * pos
})</pre>
Отметьте, что в начале анимации значение параметра <tt>pos</tt> равно&nbsp;<tt>0</tt>, а в конце анимации равно&nbsp;<tt>1</tt>.<br>
Чтобы упростить задачу, в качестве второго аргумента передается функция морфинга - <tt>morph</tt>.
Эта функция, в качестве первого и второго аргументов, принимает значения&nbsp;<tt>from</tt> и&nbsp;<tt>to</tt>, которые могут быть числом, блоком строк или шестнадцатеричным значением цвета:
<pre>// javascript
var ellipse = draw.ellipse(100, 100).attr('cx', '20%').fill('#333')<br>
rect.animate(3000).move(100, 100).during(function(pos, morph, eased, situation) {
  // numeric values (числовые значения)
  ellipse.size(morph(100, 200), morph(100, 50))<br>
  // unit strings (блок строк)
  ellipse.attr('cx', morph('20%', '80%'))<br>
  // hex color strings (строки шестнадцатиричных значений цвета)
  ellipse.fill(morph('#333', '#ff0066'))
})</pre>
Параметр <tt>eased</tt> содержит позицию после применения функции плавности.<br>
Последний параметр (<tt>situation</tt>) хранит текущее положение, связанное с текущим вызовом <tt>during</tt>.<br>
Методы <tt>during()</tt>/<tt>duringAll()</tt> можно вызывать несколько раз для увеличения количества выполняемых функций.</div><br><br>

<br><br>
</body></html>
