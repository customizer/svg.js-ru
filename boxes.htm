<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>svg.js Справочное руководство</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>

<body>
<h3>Boxes</h3>
Getting a bounding box of an element is often influenced by context. SVG.js offers various methods to get a bounding box of an element.<br><br>

<h4 id="1">SVG.Box</h4>

All `SVG.*Box`instances inherit from `SVG.Box`.
<div class=blockindent><br>
<pre id="1merge"><span class="lnk" onmouseover="show('merge - сливать, объединять')" onmouseout="hide()">merge()</span></pre>
<div class=list>возвращает - самого себя (itself)</div>

All `SVG.*Box` prototypes have a nifty little feature. With `merge()`, two `SVG.*Box` instances can be merged into one new instance, basically being the bounding box of the two original boxes. For example:

<pre>// javascript
var box1 = draw.rect(100,100).move(50,50).bbox()
var box2 = draw.rect(100,100).move(200,200).bbox()
var box3 = box1.merge(box2)</pre><br>

<pre id="1transform"><span class="lnk" onmouseover="show('transform - преобразовать, трансформировать')" onmouseout="hide()">transform()</span></pre>
<div class=list>возвращает - <tt>SVG.Box</tt></div>

Transforms the box with given a matrix:

<pre>// javascript
var transformedBox = box.transform(matrix)</pre></div><br>


<h4 id="2">SVG.ViewBox</h4>

The viewBox specifies a rectangle in user space which should be mapped to the bounds of the viewport established by the given element, taking into account attribute preserveAspectRatio.
<div class=blockindent><br>
## viewbox() _as getter_

`constructor on` __`SVG.Element`__
`returns` __`SVG.ViewBox`__ `which inherits from ` __`SVG.Box`__

Without any arguments an instance of `SVG.ViewBox` will be returned:

<pre>// javascript
var box = draw.viewbox()</pre>

But the best thing about the `viewbox()` method is that you can get the zoom of the viewbox:

<pre>// javascript
var box = draw.viewbox()
var zoom = box.zoom</pre>

If the size of the viewbox equals the size of the svg drawing, the zoom value will be 1.

## viewbox() _as setter_

`returns` __`itself`__

The `viewBox` attribute of an <tt>&#60;svg&#62;</tt> element can be managed with the `viewbox()` method. When supplied with four arguments it will act as a setter:

<pre>// javascript
draw.viewbox(0, 0, 297, 210)</pre>

Alternatively you can also supply an object as the first argument:

<pre>// javascript
draw.viewbox({ x: 0, y: 0, width: 297, height: 210 })</pre></div><br>


<h4 id="3">SVG.BBox</h4>

Stands for Bounding Box.

<iframe width="100%" height="375" src="//jsfiddle.net/wout/ear3azfb/embedded/result,js/?accentColor=f06" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

## bbox()

`constructor on` __`SVG.Element`__
`returns` __`SVG.BBox`__ `which inherits from ` __`SVG.Box`__

Get the bounding box of an element. This is a wrapper for the native `getBBox()` method but adds more values:

<pre>// javascript
path.bbox()</pre>

This will return an instance of `SVG.BBox` containing the following values:

- `width` (value from native `getBBox`)
- `height` (value from native `getBBox`)
- `w` (shorthand for `width`)
- `h` (shorthand for `height`)
- `x` (value from native `getBBox`)
- `y` (value from native `getBBox`)
- `cx` (center `x` of the bounding box)
- `cy` (center `y` of the bounding box)
- `x2` (lower right `x` of the bounding box)
- `y2` (lower right `y` of the bounding box)<br><br>


<h4 id="4">SVG.RBox</h4>

Stands for Rect Box. It wraps the native `getBoundingClientRect()` method. It's different from the BBox because it calculates the bounding box around the visual representation of the element, including all transformations.
<iframe width="100%" height="375" src="//jsfiddle.net/mtnrbq/bhunb7xp/embedded/result,js/?accentColor=f06" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<div class=blockindent><br>
## rbox()

`constructor on` __`SVG.Element`__
`returns` __`SVG.RBox`__ `which inherits from ` __`SVG.Box`__

Is similar to `bbox()` but will give you the box around the exact visual representation of the element, relative to the screen coordinate system, taking all transformations into account.

<pre>// javascript
path.rbox()</pre>

Usually, what is needed is the box relative to the drawing. To get this, pass the __`SVG.Container`__ of the drawing.

<pre>// javascript
path.rbox(draw)</pre>

This will return an instance of `SVG.RBox` containing the following values relative either to the screen or the __`SVG.Container`__  parameter:

- `width` (the actual visual width)
- `height` (the actual visual height)
- `w` (shorthand for `width`)
- `h` (shorthand for `height`)
- `x` (the actual visual position on the x-axis)
- `y` (the actual visual position on the y-axis)
- `cx` (center `x` of the bounding box)
- `cy` (center `y` of the bounding box)
- `x2` (lower right `x` of the bounding box)
- `y2` (lower right `y` of the bounding box)

__Important__: Mozilla browsers include stroke widths where other browsers do not. Therefore the resulting box might be different in Mozilla browsers. It is very hard to modify this behaviour so for the time being this is an inconvenience we have to live with.

## addOffset()

`returns` __`itself`__

Adds the offset by the current window scroll position because the native `getBoundingClientRect` changes when window is scrolled.

<pre>// javascript
box.addOffset()</pre></div>


<br><br>
</body></html>
