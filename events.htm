<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<title>svg.js Справочное руководство</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="1.css">
<script type="text/javascript" src="1.js"></script>
</head>

<body>
<h3>События</h3>
SVG.js supports named events, event listeners and custom events. all without any dependencies on any other library.
<br><br>

<h4 id="1">Базовые события</h4>
<div class=blockindent><br>

## <span class="subject">element.</span>click()

<div class=list>возвращает - самого себя (itself)</div>

Events can be bound to elements as follows:

<pre>// javascript
element.click(function() {
  this.fill({ color: '#f06' })
})</pre>

Removing it is quite as easy:

<pre>// javascript
element.click(null)</pre>

All available other events are: `click`, `dblclick`, `mousedown`, `mouseup`, `mouseover`, `mouseout`, `mousemove`, `touchstart`, `touchmove`, `touchleave`, `touchend` and `touchcancel`...</div><br><br>


<h4 id="2">Слушатели событий</h4>
<div class=blockindent><br>
## <span class="subject">element.</span>fire()

<div class=list>возвращает - самого себя (itself)</div>

Fire an event:

<pre>// javascript
element.fire(event)</pre>

Optionally, an object with arbitrary data can be passed as the second argument:

<pre>// javascript
element.fire(event, { arbitrary: data })</pre>

## <span class="subject">element.</span>event()
<div class=list>возвращает - <tt>event</tt></div>

When a given event is fired using `fire()`, the passed event will be stored locally. The `event()` method provides access to that stored event:

<pre>// javascript
var event = element.event()</pre>


## <span class="subject">element.</span>on()

<div class=list>возвращает - самого себя (itself)</div>

<pre>// javascript
var click = function() {
  this.fill({ color: '#f06' })
}

element.on('click', click)</pre>

**Note:** The context of `this` in the callback is bound to the element. You can change this context by applying your own object:

<pre>// javascript
element.on('click', click, window) // context of this is window</pre>

## <span class="subject">element.</span>off()

<div class=list>возвращает - самого себя (itself)</div>

Unbinding events is just as easy:

<pre>// javascript
element.off('click', click)</pre>

Or to unbind all listeners for a given event:

<pre>// javascript
element.off('click')</pre>

Or even unbind all listeners for all events:

<pre>// javascript
element.off()</pre>

<br>
# Other elements

Adding and removing event listeners from elements also works on other elements

## <span class="subject">SVG.</span>on()

<pre>// javascript
SVG.on(window, 'click', click)</pre>

## <span class="subject">SVG.</span>off()

<pre>// javascript
SVG.off(window, 'click', click)</pre></div><br><br>


<h4 id="3">Настраиваемые события</h4>

You can even use your own events.

Just add an event listener for your event:
<pre>// javascript
element.on('myevent', function() {
  alert('ta-da!')
})</pre>

Now you are ready to fire the event whenever you need:

<pre>// javascript
function whenSomethingHappens() {
  element.fire('myevent')
}

// or if you want to pass an event
function whenSomethingHappens(event) {
  element.fire(event)
}</pre>

You can also pass some data to the event:

<pre>// javascript
function whenSomethingHappens() {
  element.fire('myevent', {some:'data'})
}

element.on('myevent', function(e) {
  alert(e.detail.some) // outputs 'data'
})</pre>

SVG.js supports namespaced events following the syntax `event.namespace`.

A namespaced event behaves like a normal event with the difference that you can remove it without touching handlers from other namespaces.

<pre>// javascript
// attach
element.on('myevent.namespace', function(e) {
  // do something
})

// detach all handlers of namespace for myevent
element.off('myevent.namespace')

// detach all handlers of namespace
element.off('.namespace')

// detach all handlers including all namespaces
element.off('myevent')</pre>

However, you can't fire a specific namespaced event. Calling `element.fire('myevent.namespace')` won't do anything while `element.fire('myevent')` works and fires all attached handlers of the event

_Important: always make sure you namespace your event to avoid conflicts. Preferably use something very specific. So `event.wicked` for example would be better than something generic like `event.svg`._



<br><br>
</body></html>
